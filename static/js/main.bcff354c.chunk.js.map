{"version":3,"sources":["logo.svg","assets/images/clap.gif","components/NpsSelector/NpsSelector.tsx","spa/Home/Home.tsx","spa/Justify/Justify.tsx","spa/Thanks/Thanks.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","NpsSelector","npsArray","value","color","renderSelector","item","onClickFunc","_this","props","react_default","a","createElement","key","className","style","backgroundColor","concat","onClick","map","this","Component","Home","state","evaluation","_this2","react_router","to","components_NpsSelector_NpsSelector","setState","Justify","buttonAction","textInformed","Button","content","secondary","primary","type","event","preventDefault","_this$state","equals","Form","onSubmit","bind","TextArea","required","autoFocus","placeholder","ButtonComponents","Thanks","src","imgSmile","alt","App","logo","react_router_dom","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcff354c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/clap.c44d98a6.gif\";","import React, {Component} from 'react';\r\nimport {map} from 'ramda';\r\nimport './style.css';\r\n\r\nexport interface itemType {\r\n\tvalue: number,\r\n\tcolor: string\r\n};\r\n\r\ntype Props = {\r\n\tonClickFunc: Function,\r\n};\r\n\r\nclass NpsSelector extends Component<Props> {\r\n\r\n\tprivate npsArray = [\r\n\t\t{ value: 0, color: \"#B72025\" },\r\n\t\t{ value: 1, color: \"#D62027\" },\r\n\t\t{ value: 2, color: \"#F05223\" },\r\n\t\t{ value: 3, color: \"#F36F21\" },\r\n\t\t{ value: 4, color: \"#FAA823\" },\r\n\t\t{ value: 5, color: \"#FFCA27\" },\r\n\t\t{ value: 6, color: \"#ECDB12\" },\r\n\t\t{ value: 7, color: \"#E8E73D\" },\r\n\t\t{ value: 8, color: \"#C5D92D\" },\r\n\t\t{ value: 9, color: \"#AFD136\" },\r\n\t\t{ value: 10, color: \"#64B64D\" }\r\n\t];\r\n\r\n\tprivate renderSelector = (item: itemType) => {\r\n\t\tconst { onClickFunc } = this.props\r\n\r\n\t\treturn (\r\n\t\t\t<div key={item.value} className=\"nps-items\"\r\n\t\t\t\tstyle={{ backgroundColor: `${item.color}` }}\r\n\t\t\t\tonClick={() => onClickFunc(item.value)}>\r\n\t\t\t\t{item.value}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\t\r\n\r\n    render () {\r\n\t\treturn (\r\n\t\t\t<div className=\"nps-list\">\r\n\t\t\t\t{map(this.renderSelector, this.npsArray)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default NpsSelector","import React, { Component } from 'react'\r\nimport { NpsSelector } from '../../components'\r\nimport {Redirect} from 'react-router-dom'\r\nimport './style.css'\r\n\r\ntype State = {\r\n\tevaluation: number\r\n}\r\n\r\nclass Home extends Component<State> {\r\n\r\n\tstate = {\r\n\t\tevaluation: -1\r\n\t}\r\n\r\n    render () {\r\n\t\tconst {\r\n\t\t\tevaluation\r\n\t\t} = this.state\r\n\t\t/**\r\n\t\t * Render the SPA according the value of\r\n\t\t * score selected by user\r\n\t\t */\r\n\t\tif (evaluation > -1 && evaluation <= 7) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect to=\"/justify\" />\r\n\t\t\t)\r\n\t\t} else if (evaluation > 7) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect to=\"/Thanks\" />\r\n\t\t\t)\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<p className=\"question\">\r\n\t\t\t\t\tCom base na sua experiência, qual a probabilidade \r\n\t\t\t\t\tde você nos recomendar a um amigo ou alguém da sua\r\n\t\t\t\t\tfamília?\r\n\t\t\t\t</p>\r\n\t\t\t\t<NpsSelector onClickFunc={(value: number) => this.setState({ evaluation: value })}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport { \r\n\tForm,\r\n\tButton,\r\n\tTextArea\r\n} from 'semantic-ui-react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { equals } from 'ramda';\r\nimport './style.css';\r\n\r\ntype State = {\r\n\tbuttonAction: string,\r\n\ttextInformed: boolean\r\n};\r\n\r\nconst backAction = 'back';\r\nconst goAheadAction = 'goAhead';\r\n\r\nclass Justify extends Component<State> {\r\n\r\n\tstate = {\r\n\t\tbuttonAction: '',\r\n\t\ttextInformed: false\r\n\t}\r\n\t\r\n\tButtonComponents () {\r\n\t\treturn (\r\n\t\t\t<div className=\"buttons\">\r\n\t\t\t\t<Button\r\n\t\t\t\t\tclassName=\"buttonsecondary\" \r\n\t\t\t\t\tcontent=\"Voltar\" \r\n\t\t\t\t\tsecondary \r\n\t\t\t\t\tonClick={() => this.setState({buttonAction: backAction})}/>\r\n\t\t\t\t<Button \r\n\t\t\t\t\tclassName=\"buttonprimary\"\r\n\t\t\t\t\tcontent=\"Avançar\"\r\n\t\t\t\t\tprimary \r\n\t\t\t\t\ttype=\"submit\" />\r\n\t\t\t</div >\r\n\t\t)\r\n\t}\r\n\r\n\tonSubmit (event:any) {\r\n\t\tevent.preventDefault()\r\n\t\tthis.setState({\r\n\t\t\ttextInformed: true,\r\n\t\t\tbuttonAction: goAheadAction\r\n\t\t})\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {\r\n\t\t\ttextInformed,\r\n\t\t\tbuttonAction\r\n\t\t} = this.state\r\n\r\n\t\tif (equals(buttonAction, backAction)) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect to=\"/\" />\r\n\t\t\t)\r\n\t\t} else if(textInformed && equals(buttonAction, goAheadAction)) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect to=\"/Thanks\" />\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Form className=\"container\" onSubmit={this.onSubmit.bind(this)}>\r\n\t\t\t\t<p className=\"question\">\r\n\t\t\t\t\tPor favor, comente os motivos da sua avaliação.\r\n\t\t\t\t\tAssim, você nos ajuda a continuar melhorando.\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t<TextArea \r\n\t\t\t\t\trequired\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t\tclassName=\"textarea\"\r\n\t\t\t\t\tplaceholder=\"Conta mais pra gente... XD\" />\r\n\r\n\t\t\t\t{this.ButtonComponents()}\r\n\t\t\t</Form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Justify","import React, {Component} from 'react';\r\nimport imgSmile from '../../assets/images/clap.gif'\r\nimport './style.css'\r\n\r\nclass Thanks extends Component {\r\n    render () {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<img src={imgSmile} alt=\"clap\" />\r\n\t\t\t\t<p><b>Muito obrigado por sua colaboração!</b></p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Thanks","import React from 'react';\r\nimport {\r\n\tBrowserRouter as Router, \r\n\tRoute,\r\n\tSwitch\r\n} from 'react-router-dom'\r\nimport logo from './logo.svg';\r\nimport { \r\n\tHome, \r\n\tThanks,\r\n\tJustify\r\n} from '../src/spa';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header className=\"App-header\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" /> \r\n\t\t\t\t\t<p>Fake Company LTDA</p>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<Router>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/\" exact component={Home} />\r\n\t\t\t\t\t<Route path=\"/justify\" component={Justify} />\r\n\t\t\t\t\t<Route path=\"/Thanks\" component={Thanks} />\r\n\t\t\t\t\t{/* <Route path=\"*\" component={NotFound} /> */}\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}